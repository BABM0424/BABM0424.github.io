<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java中的String类</title>
    <link href="/2021/07/03/210703/"/>
    <url>/2021/07/03/210703/</url>
    
    <content type="html"><![CDATA[<p>String可谓人人皆知，但是Sting不属于java 8大基本类型，它为字符串操作提供了一系列的成员函数，现在我们稍微了解一下，对其中的坑加以区分</p><h1 id="Java-String类定义"><a href="#Java-String类定义" class="headerlink" title="Java String类定义"></a>Java String类定义</h1><p>首先我们查看String类的源码（基于jdk8）</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hash; <span class="hljs-comment">// Default to 0</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">6849794470754667710L</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ObjectStreamField[] serialPersistentFields =        <span class="hljs-keyword">new</span> ObjectStreamField[<span class="hljs-number">0</span>];    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">this</span>.value = <span class="hljs-string">""</span>.value;    &#125;    <span class="hljs-comment">//······//</span>&#125;</code></pre><ul><li><p>String类是final类，也就是说String类无法被继承。</p></li><li><p>成员变量value是通过char[]进行存储，可以看到这也是final变量，意味着String的值无法被修改？</p><p>等等，似乎和我们认知有一些不同，按理来说String的值不仅可以replace，add，同样也可以直接=另外一个字符串。这是为什么呢？</p></li></ul><h1 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h1><p>字符串的分配和其他的对象分配一样，需要耗费高昂的时间与空间作为代价，为了提高性能和减少内存开销，JVM做了以下操作：</p><ul><li><p>为字符串开辟一个字符串常量池，有点像缓冲区</p></li><li><p>在创建字符串常量时需要判断常量池里是否有这样的字符串，如果有就返回引用实例，否则就需要先在常量池中创建字符串然后返回引用实例</p></li><li><p>所以常量池中是不会存在相同的字符串</p></li></ul><p>  举个栗子：</p>  <pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>;String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);</code></pre><p>  可以看到，str1直接指向字符串常量池中的abc，而str2指向堆中的new String，然后new String的值为字符串常量池的abc</p><p>  <img src="1.png" srcset="/img/loading.gif" alt="1"></p><p>  那么String str1 = “abc”;String str2 = new String(“abc”);分别创建了几个新对象？</p><ul><li><p>String str1=”abc”;产生一个对象，”abc”放入常量池中，而str1为引用，因此有一个新对象</p></li><li><p>String str2 = new String(“abc”);产生一个或者两个对象，堆中new了一个新的String，str2引用了这个新对象（这里我们叫它temp），然后判断常量池中是否存在”abc”，如果不存在，需要创建一个”abc”对象，然后temp引用常量池的”abc”</p></li></ul>  <br/>  <details>    <summary>是否接受挑战？判断创建了几个对象（假设语句之前常量池都是空的）</summary>    <pre><code class="hljs arduino"><span class="hljs-keyword">String</span> str3 = <span class="hljs-string">"a"</span>+<span class="hljs-string">"b"</span>;<span class="hljs-comment">//3</span><span class="hljs-keyword">String</span> str4 = <span class="hljs-string">"ab"</span>+<span class="hljs-string">"ab"</span>;<span class="hljs-comment">//2</span><span class="hljs-keyword">String</span> str5 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"ab"</span>+<span class="hljs-string">"ab"</span>);<span class="hljs-comment">//3</span><span class="hljs-keyword">String</span> str6 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"a"</span>+<span class="hljs-string">"b"</span>);<span class="hljs-comment">//4</span></code></pre>  </details><h3 id="结合以上，我们可以得出结论："><a href="#结合以上，我们可以得出结论：" class="headerlink" title="结合以上，我们可以得出结论："></a>结合以上，我们可以得出结论：</h3><ul><li><p>单独使用””引号创建的字符串都是常量,编译期就已经确定存储到String Pool中</p></li><li><p>使用new String(“”)创建的对象会存储到heap中,是运行期新创建的</p></li></ul><h1 id="equal-和"><a href="#equal-和" class="headerlink" title="equal 和 =="></a>equal 和 ==</h1><p>依旧是查看源码</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;        String anotherString = (String)anObject;        <span class="hljs-keyword">int</span> n = value.length;        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;            <span class="hljs-keyword">char</span> v1[] = value;            <span class="hljs-keyword">char</span> v2[] = anotherString.value;            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">if</span> (v1[i] != v2[i])                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;                i++;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;</code></pre><p>我们都知道，Object类中的equals是判断引用地址的，但是在String类中稍有不同，原因在于String重写了equals</p><p>String类中==判断地址相同与否，而equals判断值相同与否</p><p>通过源码可以看出equal中先判断==，然后判断字符串的char[]是否相同，也就是说比较的是内容</p><p>结合上一节我们可以看出</p><pre><code class="hljs java">String a = <span class="hljs-string">"abc"</span>;String b = <span class="hljs-string">"abc"</span>;<span class="hljs-keyword">boolean</span> judge1 = a.equals(b);<span class="hljs-comment">//true</span><span class="hljs-keyword">boolean</span> judge2 = a==b;<span class="hljs-comment">//false</span></code></pre><h1 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h1><p>既然字符串创建完后不可修改，那么字符串的改变操作是怎样完成的呢，如replace，还有+=操作</p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">char</span> oldChar, <span class="hljs-keyword">char</span> newChar)</span> </span>&#123;    <span class="hljs-keyword">if</span> (oldChar != newChar) &#123;        <span class="hljs-keyword">int</span> len = value.length;        <span class="hljs-keyword">int</span> i = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">char</span>[] val = value; <span class="hljs-comment">/* avoid getfield opcode */</span>        <span class="hljs-keyword">while</span> (++i &lt; len) &#123;            <span class="hljs-keyword">if</span> (val[i] == oldChar) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span> (i &lt; len) &#123;            <span class="hljs-keyword">char</span> buf[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[len];            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;                buf[j] = val[j];            &#125;            <span class="hljs-keyword">while</span> (i &lt; len) &#123;                <span class="hljs-keyword">char</span> c = val[i];                buf[i] = (c == oldChar) ? newChar : c;                i++;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(buf, <span class="hljs-keyword">true</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;&#125;</code></pre><p>通过<code>return new String(buf,true);</code>可以看出来其实replace后返回的是一个新的String了，也就是说实际上原本的String并没有改变。只不过是引用到了一个新的String上，并且原本常量池的对象不会被GC回收</p><p>也因此，调用replace时需要将对象分配给新的引用实例</p><pre><code class="hljs java">s.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>);<span class="hljs-comment">//不起效，新的对象创建后未分配引用实例</span>s = s.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>);<span class="hljs-comment">//新的对象返回给原来的引用，看起来像是在原本的s上进行replace一样</span></code></pre><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串+"></a>字符串+</h1><p>+=其实和+是一个道理，我们不做特殊讨论</p><p>Java机制保证了无法重载操作符。但是String不属于8大基本类型的情况下是怎么使用+的呢。只有一种可能：</p><p>java自己破例帮我们写了一个重载，在使用加号进行计算的表达式中，只要遇到String字符串，则所有的数据都会转化为String类型进行拼接，如果是原始数据，则直接拼接，如果是对象。则调用toStirng方法的返回值然后拼接。</p><p>我们看下面几个问题</p><pre><code class="hljs java">String str1 = <span class="hljs-string">'abc'</span>;String str2 = <span class="hljs-string">'def'</span>;String res = str1 + str2;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>;String res = str1 + <span class="hljs-string">"def"</span>;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"def"</span>);String res = str1 + str2;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String res = str1 + <span class="hljs-string">"def"</span>;</code></pre><p>以上四组代码获取的res.equals(“abcdef”)的值为true，字符串常量池中分别有什么？</p><p>利用javap进行反解析</p><blockquote><p>javac test.java</p></blockquote><blockquote><p>javap -verbose -c test</p></blockquote><p>对四种情况查看constant pool</p><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#9</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#20</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#4</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#5</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#6</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#22</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#9</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#9</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#20</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#5</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#21</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#9</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#11</span>.<span class="hljs-string">#20</span>        <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#24</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#8</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#26</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#9</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#27</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>  <span class="hljs-string">#10</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#28</span>            <span class="hljs-comment">// com/FJL/test</span>  <span class="hljs-string">#11</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#29</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#11</span>.<span class="hljs-string">#20</span>        <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#6</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#25</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#26</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#9</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#27</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>  <span class="hljs-string">#10</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#28</span>            <span class="hljs-comment">// com/FJL/test</span>  <span class="hljs-string">#11</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#29</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><p>可以看到constant pool里都没有abcdef的，对比一下如下代码的结果</p><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"def"</span>);String res = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>+<span class="hljs-string">"def"</span>);</code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#8</span>.<span class="hljs-string">#17</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#18</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#21</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abcdef</span>   <span class="hljs-string">#7</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#23</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><p>是有abcdef生成的，这是为什么呢。</p><p>通过观察可以发现+针对于上述四种情况都是相当于调用了StringBuilder.append(“___”).toString();</p><p>而最后一种情况直接加两个常量则没有这种字节码。</p><p>因此针对于String 的+ ，是不会在字符串常量池中创建新对象的。</p><p><strong>结论：+前后有一个是String类，就不会把加完的结果创建在字符串常量池中</strong></p><h1 id="StringBuffer-and-StringBuilder"><a href="#StringBuffer-and-StringBuilder" class="headerlink" title="StringBuffer and StringBuilder"></a>StringBuffer and StringBuilder</h1><p>由于String前面介绍的特殊性质，才有了StringBuffer和StringBuilder，二者都可以改变内容的值</p><p>即StringBuffer和StringBuilder类的对象可以被多次修改，但是不会产生新的未使用的对象</p><p>二者的区别在于</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> count;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> value.length;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minimumCapacity)</span> </span>&#123;    <span class="hljs-keyword">super</span>.ensureCapacity(minimumCapacity);&#125;······</code></pre><p>StringBuffer类的override的函数都有synchronized关键字修饰，即可以多线程访问</p><p>StringBuffer是<strong>线程安全的</strong>，StringBuilder<strong>不是线程安全的</strong></p><p>执行效率一般情况下是：</p><p>　<strong>StringBuilder &gt; StringBuffer &gt; String</strong></p><p>而对于String，StringBuffer和StringBuilder三者而言，需要在特定的场合下使用：</p><p><strong>String：适用于少量的字符串操作的情况</strong></p><p><strong>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</strong></p><p><strong>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo搭建自己的博客</title>
    <link href="/2020/06/10/200610/"/>
    <url>/2020/06/10/200610/</url>
    
    <content type="html"><![CDATA[<hr><p>本文介绍从零开始搭建自己的个人博客，使用hexo框架可以有效节省时间，当然最主要的是众多美观的主题可供我们选择！</p><h1 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h1><h3 id="安装nodejs与npm"><a href="#安装nodejs与npm" class="headerlink" title="安装nodejs与npm"></a>安装nodejs与npm</h3><p>hexo需要使用NodeJs，去官网下载Node.js</p><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>Node.js集成了npm（默认的包管理工具无需自己安装）</p><p>在命令行查看自己是否安装成功</p><blockquote><p>FJLMac ~&gt; node -v<br>v14.2.0</p><p>FJLMac ~&gt; npm -v<br>6.14.4</p></blockquote><h1 id="0x02-安装hexo"><a href="#0x02-安装hexo" class="headerlink" title="0x02 安装hexo"></a>0x02 安装hexo</h1><p>主角登场！！！</p><p>先在想建博客的地方新建文件夹，今后所有的博客相关全都放在这里，遇到问题了删了重来就完事了。</p><h3 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h3><p>国外资源，国内好像下载起来很有问题。参考别人的做法。使用淘宝的国内镜像仓库中的资源。即安装cnpm，使用cnpm作为包管理器</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>检查是否安装完成</p><blockquote><p>FJLMac ~&gt; cnpm -v<br><a href="mailto:cnpm@6.1.1">cnpm@6.1.1</a> (/usr/local/lib/node_modules/cnpm/lib/parse_argv.js)<br><a href="mailto:npm@6.14.5">npm@6.14.5</a> (/usr/local/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)<br><a href="mailto:node@14.2.0">node@14.2.0</a> (/usr/local/bin/node)<br><a href="mailto:npminstall@3.27.0">npminstall@3.27.0</a> (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)<br>prefix=/usr/local<br>darwin x64 19.3.0<br>registry=<a href="https://r.npm.taobao.org" target="_blank" rel="noopener">https://r.npm.taobao.org</a></p></blockquote><h3 id="使用cnpm安装hexo"><a href="#使用cnpm安装hexo" class="headerlink" title="使用cnpm安装hexo"></a>使用cnpm安装hexo</h3><blockquote><p>cnpm install -g hexo-cli</p></blockquote><p>检查安装完成</p><blockquote><p>FJLMac ~&gt; hexo -v<br>hexo-cli: 3.1.0<br>os: Darwin 19.3.0 darwin x64<br>node: 14.2.0<br>v8: 8.1.307.31-node.33<br>uv: 1.37.0<br>…</p></blockquote><h3 id="使用hexo初始化"><a href="#使用hexo初始化" class="headerlink" title="使用hexo初始化"></a>使用hexo初始化</h3><p>去新建的文件夹下hexo init</p><p><img src="1.png" srcset="/img/loading.gif" alt="image-20200610002829385"></p><h1 id="0x03-本机测试"><a href="#0x03-本机测试" class="headerlink" title="0x03 本机测试"></a>0x03 本机测试</h1><p>hexo的几个命令</p><blockquote><p>hexo clean #可以清除缓存</p><p>hexo g        #generate， 生成文件</p><p>hexo s        #server，在本机4000端口运行，可以查看预览效果</p><p>hexo d       #deploy，部署到github上</p></blockquote><p>每次修改的话先clean 然后generate后server看一下，没问题了再deploy嗷。</p><p>查看效果即输入localhost:4000查看</p><p><img src="2.png" srcset="/img/loading.gif" alt="image-20200610003659342"></p><h1 id="0x04-托管到github上"><a href="#0x04-托管到github上" class="headerlink" title="0x04 托管到github上"></a>0x04 托管到github上</h1><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>在自己的github上建立一个新仓库，仓库名为<em>yourname</em>.github.io(这个一定不能弄错，会哭的)</p><h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><blockquote><p>cnpm install –save hexo-deployer-git</p></blockquote><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>vim打开hexo根目录下的_config.yml</p><blockquote><p>deploy:<br>  type: git<br>  repo: <em>你的仓库的https地址</em><br>  branch: master</p></blockquote><p>可以在建立仓库的时候直接把https地址复制了，也可以建完之后进入仓库主页的clone按钮下去复制</p><p><img src="3.png" srcset="/img/loading.gif" alt="image-20200610003659342"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>一定要在hexo s之后确认没啥毛病了再部署上去</p><blockquote><p>hexo d</p></blockquote><p>之后就可以去自己的站点访问了。<em>yourname</em>.github.io</p><p>如果有需要自己去购买一个域名去备案就可以了。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>hexo真的是神奇，首先感谢b站up主<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=11446526799871628860" target="_blank" rel="noopener">CodeSheep</a>的教程。自己弄起来这个的过程还是挺有意思的，hexo的功能还很强大等待我们去发掘，自己以后慢慢瞎折腾吧。主题什么的之后自己再写博客好了。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/09/hello-world/"/>
    <url>/2020/06/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
