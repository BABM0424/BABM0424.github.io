<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一次try-catch-finally的探究</title>
    <link href="/2021/11/05/trycatch/"/>
    <url>/2021/11/05/trycatch/</url>
    
    <content type="html"><![CDATA[<h1 id="一次try-catch-finally的探究"><a href="#一次try-catch-finally的探究" class="headerlink" title="一次try-catch-finally的探究"></a>一次try-catch-finally的探究</h1><p>这几天同学问了一个问题，这个的代码输出是什么</p><pre><code class="hljs java"><span class="hljs-comment">// 记作case1</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;         <span class="hljs-keyword">int</span> i = m_1();        System.out.println(i);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;        <span class="hljs-keyword">try</span> &#123;            System.out.println(<span class="hljs-string">"start:"</span>);            <span class="hljs-keyword">return</span> i += <span class="hljs-number">10</span>;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            System.out.println(<span class="hljs-string">"error"</span> + e);        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>) &#123;                System.out.println(i);            &#125;            System.out.println(<span class="hljs-string">"finally"</span>);            i += <span class="hljs-number">30</span>;        &#125;        <span class="hljs-keyword">return</span> i;    &#125;&#125;</code></pre><p>抱着刨根问底的态度，做了以下探究</p><h2 id="初步判断"><a href="#初步判断" class="headerlink" title="初步判断"></a>初步判断</h2><p>思考这个问题之前，得了解清楚<strong>try-catch-finally</strong>的执行顺序：</p><p><strong>try-catch-finally</strong> 根据异常的情况可能出现的几种情况</p><ol><li>try 没有异常，正常进入finally</li><li>try 中出错，进入catch后进入finally</li><li>try 中出错，没有相应的catch，进入finally</li></ol><p><em>那有return的话的执行顺序呢？</em></p><blockquote><p>按直觉来说，先执行 <code>try</code> 的话，直接 <code>return</code> 掉了还会执行 <code>finally</code> 的东西吗？</p></blockquote><p>但结果却是：<br><img src="https://z3.ax1x.com/2021/11/05/Iua5a4.png" srcset="/img/loading.gif" alt="image"></p><p>所以finally里的 <code>System.out.println()</code> 是先执行的，然后会回到 <code>return</code> 掉</p><p>这也是为什么，如果 finally 里面有 return 的话，会比 try 的 return 先返回掉</p><pre><code class="hljs java"><span class="hljs-comment">// case2</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_2</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">return</span> i += <span class="hljs-number">10</span>;    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;    &#125; <span class="hljs-keyword">finally</span> &#123;        i += <span class="hljs-number">30</span>;        <span class="hljs-keyword">return</span> i;    &#125;&#125;<span class="hljs-comment">//得到的结果是50</span></code></pre><p>但是这样的话<font color=red>case1</font>为什么 <code>i+=30</code> 没有执行呢</p><h2 id="再次搜寻"><a href="#再次搜寻" class="headerlink" title="再次搜寻"></a>再次搜寻</h2><p>因为懒，所以直接百度了一下为什么</p><p>得到的结果如下：</p><blockquote><p>try 和 catch 里有 return 时，finally 会在 return之前先被调用，执行完之后 finally 之后再 return ，此时finally里值的改变不会影响 return 的值</p></blockquote><p>那为什么值没有变呢？</p><p>为了节省时间，我们把代码简化</p><pre><code class="hljs java"><span class="hljs-comment">// case1</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">return</span> i += <span class="hljs-number">10</span>;    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        &#125; <span class="hljs-keyword">finally</span> &#123;        i += <span class="hljs-number">30</span>;    &#125;    <span class="hljs-keyword">return</span> i;&#125;</code></pre><p>先看一下编译的.class文件（不同版本的jdk生成的文件可能不一样）</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> var0 = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        var0 += <span class="hljs-number">10</span>;        <span class="hljs-keyword">int</span> var1 = var0;        <span class="hljs-keyword">return</span> var1;    &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;    &#125; <span class="hljs-keyword">finally</span> &#123;        var0 += <span class="hljs-number">30</span>;    &#125;    <span class="hljs-keyword">return</span> var0;&#125;</code></pre><p>.class文件可以看出，finally里变化的是 var0，但是return的却是 var1，这样的话确实加30给 var0 是不会影响返回 var1 的</p><p>这个机制还是挺有意思的。为了彻底搞清楚try-finally的执行顺序，反汇编一下代码看看</p><p><code>javap -c Main</code></p><pre><code class="hljs shell">  public static int m_1();    descriptor: ()I    flags: ACC_PUBLIC, ACC_STATIC    Code:      stack=1, locals=3, args_size=0         0: bipush        10// 把常量10压入操作数栈顶         2: istore_0// 把栈顶int元素pop存到局部变量表的第一个变量         3: iinc          0, 10// 第一个int型变量自增10         6: iload_0// 把第一个int变量的值丢到栈顶         7: istore_1// 把栈顶int元素pop存给局部变量表的第二个变量         8: iinc          0, 30// 第一个元素自增30        11: iload_1// 第二个int变量的值丢到栈顶        12: ireturn// return栈顶int元素        13: astore_1        14: iinc          0, 30        17: goto          26        20: astore_2        21: iinc          0, 30        24: aload_2        25: athrow        26: iload_0        27: ireturn      Exception table:         from    to  target type             3     8    13   Class java/lang/Exception             3     8    20   any&#125;</code></pre><p>JVM虚拟机栈中是这样的结构</p><p><img src="https://z3.ax1x.com/2021/11/05/IKPyDg.png" srcset="/img/loading.gif" alt="image"></p><p>字节码不是很熟，但查了一下部分指令的含义，还是可以读出意思的。文末会提供部分字节指令的意义</p><pre><code class="hljs java"> <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><span class="hljs-comment">// 把常量10压入操作数栈顶</span> <span class="hljs-number">2</span>: istore_0<span class="hljs-comment">// 把栈顶int元素pop存到局部变量表的第一个变量</span> <span class="hljs-number">3</span>: iinc          <span class="hljs-number">0</span>, <span class="hljs-number">10</span><span class="hljs-comment">// 第一个int型变量自增10</span> <span class="hljs-number">6</span>: iload_0<span class="hljs-comment">// 把第一个int变量的值丢到栈顶</span> <span class="hljs-number">7</span>: istore_1<span class="hljs-comment">// 把栈顶int元素pop存给局部变量表的第二个变量</span> <span class="hljs-number">8</span>: iinc          <span class="hljs-number">0</span>, <span class="hljs-number">30</span><span class="hljs-comment">// 第一个元素自增30</span><span class="hljs-number">11</span>: iload_1<span class="hljs-comment">// 第二个int变量的值丢到栈顶</span><span class="hljs-number">12</span>: ireturn<span class="hljs-comment">// return栈顶int元素</span></code></pre><p>与.class文件不同的是，class文件里用了var0，var1，var7三个变量，但是实际字节码中只有 0 和 1 两个变量</p><p>但是这个不影响我们理解<font color=orange> finally 的执行在 try 的 return 之前执行</font></p><p>不过不理解的几个点：</p><ul><li>偏移量12的时候就 ireturn 了，为什么后面还会有其他的指令</li><li>iinc 0, 30 为什么有<strong>三次</strong></li><li>为什么会有 astore_1， astore_2 这种引用类型变量？</li></ul><p>感觉需要更深层次地了解一下字节码</p><h2 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h2><p>研究了一下反汇编时的<code>Exception table</code>（<font color = red>异常表</font>）：</p><p>from to和target的数字代表的都是偏移量，也就是字节码前面的序号</p><table><thead><tr><th>from</th><th>to</th><th>target</th><th>type</th></tr></thead><tbody><tr><td>指令开始偏移量</td><td>指令结束偏移量</td><td>出现异常跳转偏移量</td><td>异常类型</td></tr></tbody></table><pre><code class="hljs shell">// case1的字节码异常表      stack=1, locals=3, args_size=0         0: bipush        10         2: istore_0         3: iinc          0, 10         6: iload_0         7: istore_1         8: iinc          0, 30        11: iload_1        12: ireturn        13: astore_1        14: iinc          0, 30        17: goto          26        20: astore_2        21: iinc          0, 30        24: aload_2        25: athrow        26: iload_0        27: ireturn      Exception table:         from    to  target type             3     8    13   Class java/lang/Exception             3     8    20   any</code></pre><p>第一行表示从 偏移量为3的地方开始，到偏移量为8的地方为止，如果出现了异常，并且异常类型是<code>Class java/lang/Exception</code> 那就跳转到偏移量为13的地方继续执行</p><p>同理，第二行表示从偏移量为3的地方开始，到偏移量为8的地方位置，如果出现了异常，不论是任何类型的异常，就跳转到偏移量为20的地方继续执行</p><p>第一行很好理解，其实就是进入了catch之中，相比于第二行，我们可以知道catch的指令范围应该是13-19，可以看到 iinc 也出现在了这里面，catch中出现了 finally的语句</p><p>那就可以猜想：同样的finally复制了两份，一份放到了try的指令之后，一份放到了catch的指令之后，<font color=orange><strong><em>这样就可以确保，不论异常与否，都会执行finally的指令</em></strong></font></p><blockquote><p><font color=blue>Q1</font>：复制两份分别放在try和catch之后，那为什么需要第三份呢？</p></blockquote><p>我们也可以看出来，astore_1 和 astore_2 其实就是异常的引用变量。局部变量表中的0应该是try中出错的异常引用，astore_1是catch到的异常引用</p><blockquote><p><font color=blue>Q2</font>：那astore_2的是什么。也就是说，这个异常表第二行，any是什么呢，是新的异常吗？</p></blockquote><h2 id="发散思维"><a href="#发散思维" class="headerlink" title="发散思维"></a>发散思维</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><p>这里我们大胆提问，try里出错了。catch没catch到。finally的执行情况是如何的呢？</p><p>写一个简单的测试看一下，这里直接做绝，什么也不catch</p><pre><code class="hljs java"><span class="hljs-comment">// case3</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        i+=<span class="hljs-number">10</span>;        i/=<span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">finally</span> &#123;        i += <span class="hljs-number">20</span>;        <span class="hljs-keyword">return</span> i;    &#125;&#125;</code></pre><pre><code class="hljs shell">//运行结果：40</code></pre><pre><code class="hljs shell">// 反汇编结果public static int m_3();    Code:       0: bipush        10       2: istore_0       3: iinc          0, 10       6: iload_0       7: iconst_0       8: idiv       9: istore_0      10: iinc          0, 20      13: iload_0      14: ireturn      15: astore_1      16: iinc          0, 20      19: iload_0      20: ireturn    Exception table:       from    to  target type           3    10    15   any</code></pre><p>通过case3的结果可以看到return出的40应该就是原本的 <code>int i=10;</code> ，执行了try中的 <code>i+=10;</code> 后又执行了 finally 里的 <code>i+=20;</code></p><p>所以即便没有catch到，出现了异常也会进入 finally </p><p>这就解释了<font color=blue>Q1</font>：因为即便复制了finally的代码到try中，但是try出现异常的话，异常及之后的指令都不会执行，这样无法确保finally会一定被执行到</p><hr><p>补充一下如果有多个catch，也会复制多份吗</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">return</span> i += <span class="hljs-number">10</span>;    &#125; <span class="hljs-keyword">catch</span> (NullPointerException e1) &#123;    &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e2)&#123;    &#125;<span class="hljs-keyword">finally</span> &#123;        i = <span class="hljs-number">50</span>;    &#125;    <span class="hljs-keyword">return</span> i;&#125;</code></pre><pre><code class="hljs shell">public static int m_1();  descriptor: ()I  flags: ACC_PUBLIC, ACC_STATIC  Code:    stack=1, locals=3, args_size=0       0: bipush        10       2: istore_0       3: iinc          0, 10       6: iload_0       7: istore_1       8: bipush        50      10: istore_0      11: iload_1      12: ireturn      13: astore_1      14: bipush        50      16: istore_0      17: goto          33      20: astore_1      21: bipush        50      23: istore_0      24: goto          33      27: astore_2      28: bipush        50      30: istore_0      31: aload_2      32: athrow      33: iload_0      34: ireturn    Exception table:       from    to  target type           3     8    13   Class java/lang/NullPointerException           3     8    20   Class java/lang/ArithmeticException           3     8    27   any</code></pre><p>可以看到 <code>i=50;</code>通过 <code>bipush 50</code>和 <code>istore_0</code> 一共出现了四次，验证猜想</p><h3 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h3><p>同样的，类似于case3，我们稍微改动，继续探究</p><pre><code class="hljs java"><span class="hljs-comment">// case4</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m_1</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;    <span class="hljs-keyword">try</span> &#123;        i+=<span class="hljs-number">10</span>;        i/=<span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">finally</span> &#123;        i += <span class="hljs-number">20</span>;    &#125;    <span class="hljs-keyword">return</span> i;&#125;</code></pre><p><img src="https://z3.ax1x.com/2021/11/05/IKpbVA.png" srcset="/img/loading.gif" alt="image"></p><p>这里运行异常了。</p><p>我给同学看了之后，他觉得运行顺序应该是</p><p><del>try 中的指令 -&gt; try异常语句 -&gt; finally语句 -&gt; try异常语句之后</del></p><p><del>他觉得case3之所以不报错其实是因为在没回到try异常语句之前就已经return了</del></p><p>（因为后面证实是错的就直接删除线了）</p><pre><code class="hljs shell">public static int m_1();  descriptor: ()I  flags: ACC_PUBLIC, ACC_STATIC  Code:    stack=2, locals=2, args_size=0       0: bipush        10       2: istore_0       3: iinc          0, 10       6: iload_0       7: iconst_0       8: idiv       9: istore_0      10: iinc          0, 20      13: goto          22      16: astore_1      17: iinc          0, 20      20: aload_1      21: athrow      22: iload_0      23: ireturn    Exception table:       from    to  target type           3    10    16   any</code></pre><p>好嘛，还是要从字节码入手，可以看到3-10出错了去16，这里的16 是 astore_1，也就是说，在没有任何catch的情况下依旧用了引用类型变量，这个代码里可能的引用类型变量就只有异常引用了。也就是没有捕获到任何异常的情况下，会把异常传到finally里。然后执行finally的代码之后在ireturn之前进行了athrow</p><p>所以这种情况算是：<font color=orange>这个函数没有捕获到这个异常，就不处理这个异常了。所以finally执行完。就把这个异常给抛出来了。</font></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过一系列的尝试，得到以下结论：</p><ul><li>finally是一定会执行的，其执行原理是通过把finally的指令复制到所有的分支里（try，catch）</li><li>try和catch在return之前都会执行一遍finally，并且finally不会修改原本要return的值，如果在finally中有return，那就会覆盖掉try和catch中的return先return出去（catch里的return就不测试了）</li><li>try有异常没有对应catch而进入finally后，如果finally有return，那就提前return，异常消失，如果没有return，那就会把这个异常抛给外层来解决</li></ul><h2 id="附表：字节码使用"><a href="#附表：字节码使用" class="headerlink" title="附表：字节码使用"></a>附表：字节码使用</h2><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x00</td><td>nop</td><td>None</td></tr><tr><td>0x01</td><td>aconst_null</td><td>将null推送至栈顶</td></tr><tr><td>0x02</td><td>iconst_m1</td><td>将int型-1推送至栈顶</td></tr><tr><td>0x03</td><td>iconst_0</td><td>将int型0推送至栈顶</td></tr><tr><td>0x04</td><td>iconst_1</td><td>将int型1推送至栈顶</td></tr><tr><td>0x05</td><td>iconst_2</td><td>将int型2推送至栈顶</td></tr><tr><td>0x06</td><td>iconst_3</td><td>将int型3推送至栈顶</td></tr><tr><td>0x07</td><td>iconst_4</td><td>将int型4推送至栈顶</td></tr><tr><td>0x08</td><td>iconst_5</td><td>将int型5推送至栈顶</td></tr><tr><td>0x09</td><td>lconst_0</td><td>将long型0推送至栈顶</td></tr><tr><td>0x0a</td><td>lconst_1</td><td>将long型1推送至栈顶</td></tr><tr><td>0x0b</td><td>fconst_0</td><td>将float型0推送至栈顶</td></tr><tr><td>0x0c</td><td>fconst_1</td><td>将float型1推送至栈顶</td></tr><tr><td>0x0d</td><td>fconst_2</td><td>将float型2推送至栈顶</td></tr><tr><td>0x0e</td><td>dconst_0</td><td>将double型0推送至栈顶</td></tr><tr><td>0x0f</td><td>dconst_1</td><td>将double型1推送至栈顶</td></tr><tr><td>0x10</td><td>bipush</td><td>将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td>0x11</td><td>sipush</td><td>将一个短整型常量(-32768~32767)推送至栈顶</td></tr><tr><td>0x12</td><td>ldc</td><td>将int,float或String型常量值从常量池中推送至栈顶</td></tr><tr><td>0x13</td><td>ldc_w</td><td>将int,float或String型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td>0x14</td><td>ldc2_w</td><td>将long或double型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td>0x15</td><td>iload</td><td>将指定的int型本地变量推送至栈顶</td></tr><tr><td>0x16</td><td>lload</td><td>将指定的long型本地变量推送至栈顶</td></tr><tr><td>0x17</td><td>fload</td><td>将指定的float型本地变量推送至栈顶</td></tr><tr><td>0x18</td><td>dload</td><td>将指定的double型本地变量推送至栈顶</td></tr><tr><td>0x19</td><td>aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td>0x1a</td><td>iload_0</td><td>将第一个int型本地变量推送至栈顶</td></tr><tr><td>0x1b</td><td>iload_1</td><td>将第二个int型本地变量推送至栈顶</td></tr><tr><td>0x1c</td><td>iload_2</td><td>将第三个int型本地变量推送至栈顶</td></tr><tr><td>0x1d</td><td>iload_3</td><td>将第四个int型本地变量推送至栈顶</td></tr><tr><td>0x1e</td><td>lload_0</td><td>将第一个long型本地变量推送至栈顶</td></tr><tr><td>0x1f</td><td>lload_1</td><td>将第二个long型本地变量推送至栈顶</td></tr><tr><td>0x20</td><td>lload_2</td><td>将第三个long型本地变量推送至栈顶</td></tr><tr><td>0x21</td><td>lload_3</td><td>将第四个long型本地变量推送至栈顶</td></tr><tr><td>0x22</td><td>fload_0</td><td>将第一个float型本地变量推送至栈顶</td></tr><tr><td>0x23</td><td>fload_1</td><td>将第二个float型本地变量推送至栈顶</td></tr><tr><td>0x24</td><td>fload_2</td><td>将第三个float型本地变量推送至栈顶</td></tr><tr><td>0x25</td><td>fload_3</td><td>将第四个float型本地变量推送至栈顶</td></tr><tr><td>0x26</td><td>dload_0</td><td>将第一个double型本地变量推送至栈顶</td></tr><tr><td>0x27</td><td>dload_1</td><td>将第二个double型本地变量推送至栈顶</td></tr><tr><td>0x28</td><td>dload_2</td><td>将第三个double型本地变量推送至栈顶</td></tr><tr><td>0x29</td><td>dload_3</td><td>将第四个double型本地变量推送至栈顶</td></tr><tr><td>0x2a</td><td>aload_0</td><td>将第一个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2b</td><td>aload_1</td><td>将第二个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2c</td><td>aload_2</td><td>将第三个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2d</td><td>aload_3</td><td>将第四个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2e</td><td>iaload</td><td>将int型数组指定索引的值推送至栈顶</td></tr><tr><td>0x2f</td><td>laload</td><td>将long型数组指定索引的值推送至栈顶</td></tr><tr><td>0x30</td><td>faload</td><td>将float型数组指定索引的值推送至栈顶</td></tr><tr><td>0x31</td><td>daload</td><td>将double型数组指定索引的值推送至栈顶</td></tr><tr><td>0x32</td><td>aaload</td><td>将引用类型数组指定索引的值推送至栈顶</td></tr><tr><td>0x33</td><td>baload</td><td>将boolean或byte型数组指定索引的值推送至栈顶</td></tr><tr><td>0x34</td><td>caload</td><td>将char型数组指定索引的值推送至栈顶</td></tr><tr><td>0x35</td><td>saload</td><td>将short型数组指定索引的值推送至栈顶</td></tr><tr><td>0x36</td><td>istore</td><td>将栈顶int型数值存入指定本地变量</td></tr><tr><td>0x37</td><td>lstore</td><td>将栈顶long型数值存入指定本地变量</td></tr><tr><td>0x38</td><td>fstore</td><td>将栈顶float型数值存入指定本地变量</td></tr><tr><td>0x39</td><td>dstore</td><td>将栈顶double型数值存入指定本地变量</td></tr><tr><td>0x3a</td><td>astore</td><td>将栈顶引用类型数值存入指定本地变量</td></tr><tr><td>0x3b</td><td>istore_0</td><td>将栈顶int型数值存入第一个本地变量</td></tr><tr><td>0x3c</td><td>istore_1</td><td>将栈顶int型数值存入第二个本地变量</td></tr><tr><td>0x3d</td><td>istore_2</td><td>将栈顶int型数值存入第三个本地变量</td></tr><tr><td>0x3e</td><td>istore_3</td><td>将栈顶int型数值存入第四个本地变量</td></tr><tr><td>0x3f</td><td>lstore_0</td><td>将栈顶long型数值存入第一个本地变量</td></tr><tr><td>0x40</td><td>lstore_1</td><td>将栈顶long型数值存入第二个本地变量</td></tr><tr><td>0x41</td><td>lstore_2</td><td>将栈顶long型数值存入第三个本地变量</td></tr><tr><td>0x42</td><td>lstore_3</td><td>将栈顶long型数值存入第四个本地变量</td></tr><tr><td>0x43</td><td>fstore_0</td><td>将栈顶float型数值存入第一个本地变量</td></tr><tr><td>0x44</td><td>fstore_1</td><td>将栈顶float型数值存入第二个本地变量</td></tr><tr><td>0x45</td><td>fstore_2</td><td>将栈顶float型数值存入第三个本地变量</td></tr><tr><td>0x46</td><td>fstore_3</td><td>将栈顶float型数值存入第四个本地变量</td></tr><tr><td>0x47</td><td>dstore_0</td><td>将栈顶double型数值存入第一个本地变量</td></tr><tr><td>0x48</td><td>dstore_1</td><td>将栈顶double型数值存入第二个本地变量</td></tr><tr><td>0x49</td><td>dstore_2</td><td>将栈顶double型数值存入第三个本地变量</td></tr><tr><td>0x4a</td><td>dstore_3</td><td>将栈顶double型数值存入第四个本地变量</td></tr><tr><td>0x4b</td><td>astore_0</td><td>将栈顶引用型数值存入第一个本地变量</td></tr><tr><td>0x4c</td><td>astore_1</td><td>将栈顶引用型数值存入第二个本地变量</td></tr><tr><td>0x4d</td><td>astore_2</td><td>将栈顶引用型数值存入第三个本地变量</td></tr><tr><td>0x4e</td><td>astore_3</td><td>将栈顶引用型数值存入第四个本地变量</td></tr><tr><td>0x4f</td><td>iastore</td><td>将栈顶int型数值存入指定数组的指定索引位置</td></tr><tr><td>0x50</td><td>lastore</td><td>将栈顶long型数值存入指定数组的指定索引位置</td></tr><tr><td>0x51</td><td>fastore</td><td>将栈顶float型数值存入指定数组的指定索引位置</td></tr><tr><td>0x52</td><td>dastore</td><td>将栈顶double型数值存入指定数组的指定索引位置</td></tr><tr><td>0x53</td><td>aastore</td><td>将栈顶引用型数值存入指定数组的指定索引位置</td></tr><tr><td>0x54</td><td>bastore</td><td>将栈顶boolean或byte型数值存入指定数组的指定索引位置</td></tr><tr><td>0x55</td><td>castore</td><td>将栈顶char型数值存入指定数组的指定索引位置</td></tr><tr><td>0x56</td><td>sastore</td><td>将栈顶short型数值存入指定数组的指定索引位置</td></tr><tr><td>0x57</td><td>pop</td><td>将栈顶数值弹出(数值不能是long或double类型的)</td></tr><tr><td>0x58</td><td>pop2</td><td>将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出</td></tr><tr><td>0x59</td><td>dup</td><td>复制栈顶数值并将复制值压入栈顶</td></tr><tr><td>0x5a</td><td>dup_x1</td><td>复制栈顶数值并将两个复制值压入栈顶</td></tr><tr><td>0x5b</td><td>dup_x2</td><td>复制栈顶数值并将三个(或两个)复制值压入栈顶</td></tr><tr><td>0x5c</td><td>dup2</td><td>复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶</td></tr><tr><td>0x5d</td><td>dup2_x1</td><td>dup_x1指令的双倍版本</td></tr><tr><td>0x5e</td><td>dup2_x2</td><td>dup_x2指令的双倍版本</td></tr><tr><td>0x5f</td><td>swap</td><td>将栈顶最顶端的两个数值互换(数值不能是long或double类型)</td></tr><tr><td>0x60</td><td>iadd</td><td>将栈顶两int型数值相加并将结果压入栈顶</td></tr><tr><td>0x61</td><td>ladd</td><td>将栈顶两long型数值相加并将结果压入栈顶</td></tr><tr><td>0x62</td><td>fadd</td><td>将栈顶两float型数值相加并将结果压入栈顶</td></tr><tr><td>0x63</td><td>dadd</td><td>将栈顶两double型数值相加并将结果压入栈顶</td></tr><tr><td>0x64</td><td>isub</td><td>将栈顶两int型数值相减并将结果压入栈顶</td></tr><tr><td>0x65</td><td>lsub</td><td>将栈顶两long型数值相减并将结果压入栈顶</td></tr><tr><td>0x66</td><td>fsub</td><td>将栈顶两float型数值相减并将结果压入栈顶</td></tr><tr><td>0x67</td><td>dsub</td><td>将栈顶两double型数值相减并将结果压入栈顶</td></tr><tr><td>0x68</td><td>imul</td><td>将栈顶两int型数值相乘并将结果压入栈顶</td></tr><tr><td>0x69</td><td>lmul</td><td>将栈顶两long型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6a</td><td>fmul</td><td>将栈顶两float型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6b</td><td>dmul</td><td>将栈顶两double型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6c</td><td>idiv</td><td>将栈顶两int型数值相除并将结果压入栈顶</td></tr><tr><td>0x6d</td><td>ldiv</td><td>将栈顶两long型数值相除并将结果压入栈顶</td></tr><tr><td>0x6e</td><td>fdiv</td><td>将栈顶两float型数值相除并将结果压入栈顶</td></tr><tr><td>0x6f</td><td>ddiv</td><td>将栈顶两double型数值相除并将结果压入栈顶</td></tr><tr><td>0x70</td><td>irem</td><td>将栈顶两int型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x71</td><td>lrem</td><td>将栈顶两long型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x72</td><td>frem</td><td>将栈顶两float型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x73</td><td>drem</td><td>将栈顶两double型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x74</td><td>ineg</td><td>将栈顶int型数值取负并将结果压入栈顶</td></tr><tr><td>0x75</td><td>lneg</td><td>将栈顶long型数值取负并将结果压入栈顶</td></tr><tr><td>0x76</td><td>fneg</td><td>将栈顶float型数值取负并将结果压入栈顶</td></tr><tr><td>0x77</td><td>dneg</td><td>将栈顶double型数值取负并将结果压入栈顶</td></tr><tr><td>0x78</td><td>ishl</td><td>将int型数值左移指定位数并将结果压入栈顶</td></tr><tr><td>0x79</td><td>lshl</td><td>将long型数值左移指定位数并将结果压入栈顶</td></tr><tr><td>0x7a</td><td>ishr</td><td>将int型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7b</td><td>lshr</td><td>将long型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7c</td><td>iushr</td><td>将int型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7d</td><td>lushr</td><td>将long型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7e</td><td>iand</td><td>将栈顶两int型数值”按位与”并将结果压入栈顶</td></tr><tr><td>0x7f</td><td>land</td><td>将栈顶两long型数值”按位与”并将结果压入栈顶</td></tr><tr><td>0x80</td><td>ior</td><td>将栈顶两int型数值”按位或”并将结果压入栈顶</td></tr><tr><td>0x81</td><td>lor</td><td>将栈顶两long型数值”按位或”并将结果压入栈顶</td></tr><tr><td>0x82</td><td>ixor</td><td>将栈顶两int型数值”按位异或”并将结果压入栈顶</td></tr><tr><td>0x83</td><td>lxor</td><td>将栈顶两long型数值”按位异或”并将结果压入栈顶</td></tr><tr><td>0x84</td><td>iinc</td><td>将指定int型变量增加指定值(如i++, i–, i+=2等)</td></tr><tr><td>0x85</td><td>i2l</td><td>将栈顶int型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x86</td><td>i2f</td><td>将栈顶int型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x87</td><td>i2d</td><td>将栈顶int型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x88</td><td>l2i</td><td>将栈顶long型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x89</td><td>l2f</td><td>将栈顶long型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x8a</td><td>l2d</td><td>将栈顶long型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x8b</td><td>f2i</td><td>将栈顶float型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x8c</td><td>f2l</td><td>将栈顶float型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x8d</td><td>f2d</td><td>将栈顶float型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x8e</td><td>d2i</td><td>将栈顶double型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x8f</td><td>d2l</td><td>将栈顶double型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x90</td><td>d2f</td><td>将栈顶double型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x91</td><td>i2b</td><td>将栈顶int型数值强制转换为byte型数值并将结果压入栈顶</td></tr><tr><td>0x92</td><td>i2c</td><td>将栈顶int型数值强制转换为char型数值并将结果压入栈顶</td></tr><tr><td>0x93</td><td>i2s</td><td>将栈顶int型数值强制转换为short型数值并将结果压入栈顶</td></tr><tr><td>0x94</td><td>lcmp</td><td>比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶</td></tr><tr><td>0x95</td><td>fcmpl</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td></tr><tr><td>0x96</td><td>fcmpg</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td></tr><tr><td>0x97</td><td>dcmpl</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td></tr><tr><td>0x98</td><td>dcmpg</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td></tr><tr><td>0x99</td><td>ifeq</td><td>当栈顶int型数值等于0时跳转</td></tr><tr><td>0x9a</td><td>ifne</td><td>当栈顶int型数值不等于0时跳转</td></tr><tr><td>0x9b</td><td>iflt</td><td>当栈顶int型数值小于0时跳转</td></tr><tr><td>0x9c</td><td>ifge</td><td>当栈顶int型数值大于等于0时跳转</td></tr><tr><td>0x9d</td><td>ifgt</td><td>当栈顶int型数值大于0时跳转</td></tr><tr><td>0x9e</td><td>ifle</td><td>当栈顶int型数值小于等于0时跳转</td></tr><tr><td>0x9f</td><td>if_icmpeq</td><td>比较栈顶两int型数值大小, 当结果等于0时跳转</td></tr><tr><td>0xa0</td><td>if_icmpne</td><td>比较栈顶两int型数值大小, 当结果不等于0时跳转</td></tr><tr><td>0xa1</td><td>if_icmplt</td><td>比较栈顶两int型数值大小, 当结果小于0时跳转</td></tr><tr><td>0xa2</td><td>if_icmpge</td><td>比较栈顶两int型数值大小, 当结果大于等于0时跳转</td></tr><tr><td>0xa3</td><td>if_icmpgt</td><td>比较栈顶两int型数值大小, 当结果大于0时跳转</td></tr><tr><td>0xa4</td><td>if_icmple</td><td>比较栈顶两int型数值大小, 当结果小于等于0时跳转</td></tr><tr><td>0xa5</td><td>if_acmpeq</td><td>比较栈顶两引用型数值, 当结果相等时跳转</td></tr><tr><td>0xa6</td><td>if_acmpne</td><td>比较栈顶两引用型数值, 当结果不相等时跳转</td></tr><tr><td>0xa7</td><td>goto</td><td>无条件跳转</td></tr><tr><td>0xa8</td><td>jsr</td><td>跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶</td></tr><tr><td>0xa9</td><td>ret</td><td>返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)</td></tr><tr><td>0xaa</td><td>tableswitch</td><td>用于switch条件跳转, case值连续(可变长度指令)</td></tr><tr><td>0xab</td><td>lookupswitch</td><td>用于switch条件跳转, case值不连续(可变长度指令)</td></tr><tr><td>0xac</td><td>ireturn</td><td>从当前方法返回int</td></tr><tr><td>0xad</td><td>lreturn</td><td>从当前方法返回long</td></tr><tr><td>0xae</td><td>freturn</td><td>从当前方法返回float</td></tr><tr><td>0xaf</td><td>dreturn</td><td>从当前方法返回double</td></tr><tr><td>0xb0</td><td>areturn</td><td>从当前方法返回对象引用</td></tr><tr><td>0xb1</td><td>return</td><td>从当前方法返回void</td></tr><tr><td>0xb2</td><td>getstatic</td><td>获取指定类的静态域, 并将其压入栈顶</td></tr><tr><td>0xb3</td><td>putstatic</td><td>为指定类的静态域赋值</td></tr><tr><td>0xb4</td><td>getfield</td><td>获取指定类的实例域, 并将其压入栈顶</td></tr><tr><td>0xb5</td><td>putfield</td><td>为指定类的实例域赋值</td></tr><tr><td>0xb6</td><td>invokevirtual</td><td>调用实例方法</td></tr><tr><td>0xb7</td><td>invokespecial</td><td>调用超类构建方法, 实例初始化方法, 私有方法</td></tr><tr><td>0xb8</td><td>invokestatic</td><td>调用静态方法</td></tr><tr><td>0xb9</td><td>invokeinterface</td><td>调用接口方法</td></tr><tr><td>0xba</td><td>invokedynamic</td><td>调用动态方法</td></tr><tr><td>0xbb</td><td>new</td><td>创建一个对象, 并将其引用引用值压入栈顶</td></tr><tr><td>0xbc</td><td>newarray</td><td>创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶</td></tr><tr><td>0xbd</td><td>anewarray</td><td>创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶</td></tr><tr><td>0xbe</td><td>arraylength</td><td>获取数组的长度值并压入栈顶</td></tr><tr><td>0xbf</td><td>athrow</td><td>将栈顶的异常抛出</td></tr><tr><td>0xc0</td><td>checkcast</td><td>检验类型转换, 检验未通过将抛出 ClassCastException</td></tr><tr><td>0xc1</td><td>instanceof</td><td>检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶</td></tr><tr><td>0xc2</td><td>monitorenter</td><td>获得对象的锁, 用于同步方法或同步块</td></tr><tr><td>0xc3</td><td>monitorexit</td><td>释放对象的锁, 用于同步方法或同步块</td></tr><tr><td>0xc4</td><td>wide</td><td>扩展本地变量的宽度</td></tr><tr><td>0xc5</td><td>multianewarray</td><td>创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶</td></tr><tr><td>0xc6</td><td>ifnull</td><td>为null时跳转</td></tr><tr><td>0xc7</td><td>ifnonnull</td><td>不为null时跳转</td></tr><tr><td>0xc8</td><td>goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td>0xc9</td><td>jsr_w</td><td>跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Exception</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap源码深入理解</title>
    <link href="/2021/10/27/HashMap/"/>
    <url>/2021/10/27/HashMap/</url>
    
    <content type="html"><![CDATA[<p>HashMap也算是开发中的一大常客，本文主要基于jdk8先后来深入了解HashMap的部分源码</p><h1 id="HashMap-类从属关系"><a href="#HashMap-类从属关系" class="headerlink" title="HashMap 类从属关系"></a>HashMap 类从属关系</h1><p>首先看类定义</p><p><img src="3.jpeg" srcset="/img/loading.gif" alt="类图"></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;</span><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Serializable</span> </span>&#123;&#125;</code></pre><p>可以看到HashMap继承了AbstractMap，同时还实现了Map，Cloneable，Serializable</p><p>但我们可以看到AbstractMap也已经实现了Map，那为什么HashMap在继承了AbstractMap之后要多此一举实现Map呢</p><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;&#125;</code></pre><p>搜索了一波，原因竟是！据java集合框架的创始人Josh Bloch描述，这样的写法是一个失误。在java集合框架中，类似这样的写法很多。</p><p>Stack overflow上面也进行过提问<a href="https://stackoverflow.com/questions/2165204/why-does-linkedhashsete-extend-hashsete-and-implement-sete" target="_blank" rel="noopener">https://stackoverflow.com/questions/2165204/why-does-linkedhashsete-extend-hashsete-and-implement-sete</a></p><h1 id="HashMap结构"><a href="#HashMap结构" class="headerlink" title="HashMap结构"></a>HashMap结构</h1><p>HashMap是一个哈希表，底层结构主要是由数组（哈希桶）+链表实现的，每一个哈希桶里放的都是链表。从jdk8之后，每当链表长度达到<font color=red>8</font>之后，就会自动把链表转化成<strong>红黑树</strong>。</p><p>大概是这样：</p><p><img src="2.jpeg" srcset="/img/loading.gif" alt="hashmap"></p><p>红黑树是一种自平衡的二叉查找树，除了满足二叉查找树的性质外，还需要满足如下五个条件:（这里就不做过多的介绍）</p><ol><li>节点是红色或黑色</li><li>根节点为黑色</li><li>所有叶子节点都是黑色</li><li>每个红色节点都必须有两个黑色的子节点</li><li>从任一节点到叶子节点的所有路径都包含相同数目的黑色节点</li></ol><blockquote><p> 为什么要用红黑树呢？为了增加查询效率可以理解不能单纯用链表，为什么不是AVL树呢</p></blockquote><ul><li><p>AVL树和红黑树都可以在O(log n)时间复杂度下完成查找操作。但是因为AVL是严格平衡的，在AVL树中，从根到任何叶子的最短路径和最长路径之间的差异最多为1。在红黑树中，差异可以是2倍。AVL树相较于红黑树有着更好的查找效率</p></li><li><p>但是在插入、删除节点的时候，AVL树操作有更多的旋转次数，以至于插入，删除的效率低下。因为平衡AVL树可能需要O（log n）旋转，而红黑树将需要最多两次旋转使其达到平衡</p></li><li><p>也就是说，在进行查找较多的任务下，使用AVL树；在进行插入删除较多的任务下，使用红黑树</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash;    <span class="hljs-keyword">final</span> K key;    V value;    Node&lt;K,V&gt; next;&#125;</code></pre><p>类成员：</p><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;<span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount;<span class="hljs-keyword">int</span> threshold;<span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;</code></pre><h1 id="HashMap初始化"><a href="#HashMap初始化" class="headerlink" title="HashMap初始化"></a>HashMap初始化</h1><p>HashMap根据参数有无initialCapacity和loadfactor进行不同的初始化</p><p>initialCapacity是初始容量。loadFactor是扩容时候会用到的加载因子，达到capacity*loadFactor时需要扩容</p><pre><code class="hljs java"><span class="hljs-comment">// 有initialCapacity和loadfloat，进行了一系列的校对工作</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal initial capacity: "</span> +                                           initialCapacity);    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)        initialCapacity = MAXIMUM_CAPACITY;    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal load factor: "</span> +                                           loadFactor);    <span class="hljs-keyword">this</span>.loadFactor = loadFactor;    <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);&#125;<span class="hljs-comment">// 只有initialCapacity时，传入上一个构造函数，使用默认的loadFactor=0.75</span><span class="hljs-comment">//    static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;    <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);&#125;<span class="hljs-comment">//啥也不传，都用默认</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span>&#125;</code></pre><p>用已有的Map进行构造</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;    putMapEntries(m, <span class="hljs-keyword">false</span>);&#125;</code></pre><p>首先判断容量大小够不够，需要扩容与否，然后进行挨个插入。还是很容易理解的</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;    <span class="hljs-keyword">int</span> s = m.size();    <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">if</span> (table == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// pre-size</span>            <span class="hljs-keyword">float</span> ft = ((<span class="hljs-keyword">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;<span class="hljs-comment">// s/loadFactor+1和capacity进行比较</span>            <span class="hljs-keyword">int</span> t = ((ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY) ?                     (<span class="hljs-keyword">int</span>)ft : MAXIMUM_CAPACITY);            <span class="hljs-keyword">if</span> (t &gt; threshold)                threshold = tableSizeFor(t);<span class="hljs-comment">// 获取最接近的阈值</span>        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)            resize();        <span class="hljs-comment">//到这里时扩容的判断，后面的部分会介绍具体的含义</span>        <span class="hljs-keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;            K key = e.getKey();            V value = e.getValue();            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, evict);        &#125;    &#125;&#125;</code></pre><h1 id="HashMap查找"><a href="#HashMap查找" class="headerlink" title="HashMap查找"></a>HashMap查找</h1><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;    Node&lt;K,V&gt; e;    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key)</span> </span>&#123;    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-keyword">int</span> n; K k;    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//校验</span>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node 检查第一个node</span>            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))            <span class="hljs-keyword">return</span> first;        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//赋值校验，检查后续的类型</span>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//如果已经是红黑树了，调用红黑树的查找</span>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);            <span class="hljs-keyword">do</span> &#123; <span class="hljs-comment">//查链表</span>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))                    <span class="hljs-keyword">return</span> e;            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<span class="hljs-comment">//没找到</span>&#125;</code></pre><p>containsKey其实也要查找一遍，判断与否。而不是在keySet()里找。按理来说获取到所有的key直接找应该更方便，其实不是</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(Object key)</span> </span>&#123;    <span class="hljs-keyword">return</span> getNode(hash(key), key) != <span class="hljs-keyword">null</span>;&#125;</code></pre><p>这是因为真正的keySet的获取是这样的：</p><p>第一次调用keySet方法时，是什么都没有的，需要调用KeySet()进行初始化，只有在第一次调用keySet方法时，才给keySet属性初始化。</p><p>而且和我们正常的印象不同的是，当获取到KeySet对象之后，也不是直接就拿到了所有的键的值。需要用迭代器进行迭代去拿到所有的key，而用户自己迭代的过程其实就是通过输入流来accept所有键。这也是为什么当我们拿到KeySet之后，我们也不能直接就输出所有的键或者直接得到个数，而必须进行.next来迭代</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> </span>&#123;    Set&lt;K&gt; ks = keySet;    <span class="hljs-keyword">if</span> (ks == <span class="hljs-keyword">null</span>) &#123;        ks = <span class="hljs-keyword">new</span> KeySet();        keySet = ks;    &#125;    <span class="hljs-keyword">return</span> ks;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">K</span>&gt; </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span>                 </span>&#123; <span class="hljs-keyword">return</span> size; &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span>               </span>&#123; HashMap.<span class="hljs-keyword">this</span>.clear(); &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Iterator&lt;K&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span>     </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeyIterator(); &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123; <span class="hljs-keyword">return</span> containsKey(o); &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> </span>&#123;        <span class="hljs-keyword">return</span> removeNode(hash(key), key, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>) != <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Spliterator&lt;K&gt; <span class="hljs-title">spliterator</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="hljs-keyword">this</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">//这里用了消费者类型，通过foreach输入流来挨个筛选，通过accept接受</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> K&gt; action)</span> </span>&#123;        Node&lt;K,V&gt;[] tab;        <span class="hljs-keyword">if</span> (action == <span class="hljs-keyword">null</span>)            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();        <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span> &amp;&amp; (tab = table) != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">int</span> mc = modCount;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tab.length; ++i) &#123;                <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="hljs-keyword">null</span>; e = e.next)                    action.accept(e.key);            &#125;            <span class="hljs-keyword">if</span> (modCount != mc)                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();        &#125;    &#125;&#125;</code></pre><p>但是在debug的时候其实是可以看到个数的，这个得参考<a href="https://blog.csdn.net/li_canhui/article/details/85051250" target="_blank" rel="noopener">debug没迭代前却获取到了keySet元素的个数</a></p><p>除此之外，Java8之后加入了新函数getOrDefault()，这个可以设定默认值，当找不到对应键的值的时候返回默认值。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getOrDefault</span><span class="hljs-params">(Object key, V defaultValue)</span> </span>&#123;    Node&lt;K,V&gt; e;    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? defaultValue : e.value;&#125;</code></pre><p>这个刷leetcode的时候经常用到。比如说把数组中元素出现的次数记录在hashmap中</p><pre><code class="hljs java"><span class="hljs-comment">//生硬判断</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">(String[] arr)</span></span>&#123;Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap();<span class="hljs-keyword">for</span>(String str:arr)&#123;<span class="hljs-keyword">if</span>(map.containsKey(str))&#123;map.put(map.get(str)+<span class="hljs-number">1</span>);&#125;        <span class="hljs-keyword">else</span> map.put(str,<span class="hljs-number">1</span>);&#125;&#125;<span class="hljs-comment">//使用getOrDefault简化步骤</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">(String[] arr)</span></span>&#123;Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap();<span class="hljs-keyword">for</span>(String str:arr)&#123;map.put(str,map.getOrDefault(str,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);&#125;&#125;</code></pre><h1 id="HashMap插入"><a href="#HashMap插入" class="headerlink" title="HashMap插入"></a>HashMap插入</h1><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><span class="hljs-function"><span class="hljs-params">               <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)        n = (tab = resize()).length;    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<span class="hljs-comment">//不存在的hash地址，新建一个链表</span>        tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);    <span class="hljs-keyword">else</span> &#123;        Node&lt;K,V&gt; e; K k;        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<span class="hljs-comment">//</span>            e = p;<span class="hljs-comment">//相同的键</span>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//如果是红黑树，就往红黑树里面加节点</span>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果是链表，判断是否要转红黑树</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;                    p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span>                        treeifyBin(tab, hash);<span class="hljs-comment">//加上新加的节点超过阈值后需要转成红黑树</span>                    <span class="hljs-keyword">break</span>;                &#125;                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))                    <span class="hljs-keyword">break</span>;                p = e;            &#125;        &#125;        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// existing mapping for key 重复键，只需要修改value就行了</span>            V oldValue = e.value;            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)                e.value = value;            afterNodeAccess(e);            <span class="hljs-keyword">return</span> oldValue;        &#125;    &#125;    ++modCount;    <span class="hljs-keyword">if</span> (++size &gt; threshold)<span class="hljs-comment">//判断扩容与否</span>        resize();    afterNodeInsertion(evict);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre><p>转成红黑树的代码：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-keyword">int</span> hash)</span> </span>&#123;    <span class="hljs-keyword">int</span> n, index; Node&lt;K,V&gt; e;    <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)        resize();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;        TreeNode&lt;K,V&gt; hd = <span class="hljs-keyword">null</span>, tl = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">do</span> &#123;            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-keyword">null</span>);            <span class="hljs-keyword">if</span> (tl == <span class="hljs-keyword">null</span>)                hd = p;            <span class="hljs-keyword">else</span> &#123;                p.prev = tl;                tl.next = p;            &#125;            tl = p;        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-keyword">null</span>)            hd.treeify(tab);    &#125;&#125;</code></pre><p>往红黑树里加节点：</p><p>如果参数<code>onlyIfAbsent</code>是true，那么不会覆盖相同key的值value</p><p>如果<code>evict</code>是false。那么表示是在初始化时调用的</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> TreeNode&lt;K,V&gt; <span class="hljs-title">putTreeVal</span><span class="hljs-params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><span class="hljs-function"><span class="hljs-params">                               <span class="hljs-keyword">int</span> h, K k, V v)</span> </span>&#123;    Class&lt;?&gt; kc = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">boolean</span> searched = <span class="hljs-keyword">false</span>;    TreeNode&lt;K,V&gt; root = (parent != <span class="hljs-keyword">null</span>) ? root() : <span class="hljs-keyword">this</span>;    <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;        <span class="hljs-keyword">int</span> dir, ph; K pk;        <span class="hljs-keyword">if</span> ((ph = p.hash) &gt; h)            dir = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ph &lt; h)            dir = <span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((pk = p.key) == k || (k != <span class="hljs-keyword">null</span> &amp;&amp; k.equals(pk)))            <span class="hljs-keyword">return</span> p;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((kc == <span class="hljs-keyword">null</span> &amp;&amp;                  (kc = comparableClassFor(k)) == <span class="hljs-keyword">null</span>) ||                 (dir = compareComparables(kc, k, pk)) == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">if</span> (!searched) &#123;                TreeNode&lt;K,V&gt; q, ch;                searched = <span class="hljs-keyword">true</span>;                <span class="hljs-keyword">if</span> (((ch = p.left) != <span class="hljs-keyword">null</span> &amp;&amp;                     (q = ch.find(h, k, kc)) != <span class="hljs-keyword">null</span>) ||                    ((ch = p.right) != <span class="hljs-keyword">null</span> &amp;&amp;                     (q = ch.find(h, k, kc)) != <span class="hljs-keyword">null</span>))                    <span class="hljs-keyword">return</span> q;            &#125;            dir = tieBreakOrder(k, pk);        &#125;        TreeNode&lt;K,V&gt; xp = p;        <span class="hljs-keyword">if</span> ((p = (dir &lt;= <span class="hljs-number">0</span>) ? p.left : p.right) == <span class="hljs-keyword">null</span>) &#123;            Node&lt;K,V&gt; xpn = xp.next;            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);            <span class="hljs-keyword">if</span> (dir &lt;= <span class="hljs-number">0</span>)                xp.left = x;            <span class="hljs-keyword">else</span>                xp.right = x;            xp.next = x;            x.parent = x.prev = xp;            <span class="hljs-keyword">if</span> (xpn != <span class="hljs-keyword">null</span>)                ((TreeNode&lt;K,V&gt;)xpn).prev = x;            moveRootToFront(tab, balanceInsertion(root, x));            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;    &#125;&#125;</code></pre><h1 id="HashMap扩容与红黑树的转换"><a href="#HashMap扩容与红黑树的转换" class="headerlink" title="HashMap扩容与红黑树的转换"></a>HashMap扩容与红黑树的转换</h1><p>链表在程度达到8的时候变成红黑树</p><pre><code class="hljs Java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;</code></pre><p>而在节点数量小于6的时候再转回链表</p><pre><code class="hljs Java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;</code></pre><p>扩容条件下的最小节点数</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;</code></pre><blockquote><p>为什么链表转化成红黑树和红黑树转化链表的阈值不一样呢？分别是8和6</p></blockquote><p>假想这样一种情况：</p><p>当增加删除操作在同一个阈值附近的时候，如从8变7再变回8，可能只是很简单的两步极有可能发生的接连操作，但是却在反复调用treeifyBin和unTreeifyBin，造成了系统性能的下降</p><p>而把变回链表的阈值调更小之后，即已经小于6了，比起从7再回8，我们更有理由相信从6回8更男出现。</p><p>（我感觉这里可能是某个版本设置过相同阈值，出现了问题然后进行调优的）</p><blockquote><p>链表节点数超过8就一定会转成红黑树吗？</p></blockquote><p>考虑这样一种极端情况，若干哈希桶，只有一个哈希桶有链表，这个链表的节点数超过了8。此时整个hashmap里就没有多少节点，此时是不是更代表着hashmap的hash值的设计有问题呢？</p><p>所有才有了MIN_TREEFI_CAPACITY的条件，如果某一个地址的链表节点数超过了8，但是总的节点数没有到64，需要进行扩容然后重新hash</p><p>我们可以通过转红黑树的代码看出：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-keyword">int</span> hash)</span> </span>&#123;    <span class="hljs-keyword">int</span> n, index; Node&lt;K,V&gt; e;    <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)        <span class="hljs-comment">//这个判断可以看出即便进了转红黑树的函数里，因为不满足最低总容量，所以转而调用resize()</span>        resize();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//正常的红黑树转化过程</span>        TreeNode&lt;K,V&gt; hd = <span class="hljs-keyword">null</span>, tl = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">do</span> &#123;            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-keyword">null</span>);            <span class="hljs-keyword">if</span> (tl == <span class="hljs-keyword">null</span>)                hd = p;            <span class="hljs-keyword">else</span> &#123;                p.prev = tl;                tl.next = p;            &#125;            tl = p;        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-keyword">null</span>)            hd.treeify(tab);    &#125;&#125;</code></pre><p>这里是扩容的代码：</p><p>（扩容的过程还是挺复杂的）</p><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;    Node&lt;K,V&gt;[] oldTab = table;    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;    <span class="hljs-keyword">int</span> oldThr = threshold; <span class="hljs-comment">// 阈值</span>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 表示table已经初始化过了</span>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="hljs-comment">// 比最大容量还大的话，就只有MAX_VALUE能顶得住了</span>            threshold = Integer.MAX_VALUE;            <span class="hljs-keyword">return</span> oldTab;        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold 新的阈值和容量都翻倍</span>    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span>        newCap = oldThr; <span class="hljs-comment">// 这里是带capacity的初始化的时候会出现的情况</span>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span>        <span class="hljs-comment">// 无参数初始化的时候出现的情况</span>        newCap = DEFAULT_INITIAL_CAPACITY;        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);    &#125;    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);    &#125;    threshold = newThr;    <span class="hljs-meta">@SuppressWarnings</span>(&#123;<span class="hljs-string">"rawtypes"</span>,<span class="hljs-string">"unchecked"</span>&#125;)    <span class="hljs-comment">// 正式开始扩容</span>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];    table = newTab;    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 复制原始数据</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;            Node&lt;K,V&gt; e;            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;                oldTab[j] = <span class="hljs-keyword">null</span>;                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);                <span class="hljs-comment">//如果是红黑树，就用split函数进行裁剪，这里暂时不详细展开说明，红黑树自有一套原理</span>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;                    Node&lt;K,V&gt; next;                <span class="hljs-comment">// 这里用了四个新的节点，head和tail分别代表链表节点的头和尾</span>                    <span class="hljs-comment">// 尾巴进行复制，然后把头丢在该放的位置</span>                    <span class="hljs-comment">// 至于lo和hi，其实代表的是两倍扩容后，保留在原来位置的就是lo，去新hash位置的是hi</span>                    <span class="hljs-keyword">do</span> &#123;                        next = e.next;                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 这个判断就是看能否留在原本的hash位置</span>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)                                loHead = e;                            <span class="hljs-keyword">else</span>                                loTail.next = e;                            loTail = e;                        &#125;                        <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)                                hiHead = e;                            <span class="hljs-keyword">else</span>                                hiTail.next = e;                            hiTail = e;                        &#125;                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;                        loTail.next = <span class="hljs-keyword">null</span>;                        newTab[j] = loHead; <span class="hljs-comment">// 留在原位置</span>                    &#125;                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;                        hiTail.next = <span class="hljs-keyword">null</span>;                        newTab[j + oldCap] = hiHead; <span class="hljs-comment">//新位置就是原本的位置加上原本的容量</span>                    &#125;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> newTab;&#125;</code></pre><p>看起来很复杂，其实很容易理解的</p><blockquote><p>举个例子，原本容量是4，扩容完是8。原本3这个位置的碰撞链表节点之后也只有两个去处，就是3和7。用二进制位看，原本hash碰撞最后两位是11，扩容完之后需要三位了，那新的一位可以是0或者1，所以新的hash碰撞就只有011（3）和111（7）两种情况了。新的hash地址就肯定比原来大原来的容量，即4了</p></blockquote><p>所以对应到代码里的就是分别用loTail和hiTail来往loHead和hiHead后面加该有的碰撞节点。遍历完对应位置把头节点丢过去就好了</p><p>当当前节点数达到threshold*loadFactor时需要进行扩容。</p><blockquote><p>问题来了，为什么默认值是0.75而不是其他的数呢，这个值代表了什么？</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;</code></pre><p>通过推算我们可以知道loadFactor的值为1的时候，此时数组已经满了，这个时候必然有很多的hash碰撞。这个时候再进行扩容已经晚了，已经造成了很长一段时间的低效率</p><p>而当这个值为0.5的时候，有一半的地址没有使用，这种情况下按常理来说有碰撞的可能性也不大，这样就会造成空间利用率低</p><p>所以怎么权衡0.5-1之间的值。选取一个较为合理的数就很重要。</p><p>看了很多的博客，找到一个比较信服的理由在于:</p><p><img src="1.png" srcset="/img/loading.gif" alt="image-20211027212455761"></p><p>离0.693较近的数值中，选择0.75可以更好地进行移位计算，所以默认值采用0.75</p><p>（个人看法）</p><h1 id="HashMap其他函数"><a href="#HashMap其他函数" class="headerlink" title="HashMap其他函数"></a>HashMap其他函数</h1><h2 id="tableSizeFor"><a href="#tableSizeFor" class="headerlink" title="tableSizeFor"></a>tableSizeFor</h2><p>看到这个函数是看到这段代码才深入了解的</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;    <span class="hljs-keyword">int</span> s = m.size();    <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">if</span> (table == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// pre-size 不存在,需要初始化</span>            <span class="hljs-keyword">float</span> ft = ((<span class="hljs-keyword">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;            <span class="hljs-keyword">int</span> t = ((ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY) ?                     (<span class="hljs-keyword">int</span>)ft : MAXIMUM_CAPACITY);            <span class="hljs-keyword">if</span> (t &gt; threshold)                threshold = tableSizeFor(t); <span class="hljs-comment">// 这个阈值利用t计算出来,t是ft和maxcapacity较小值</span>        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)            resize();        <span class="hljs-keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;            K key = e.getKey();            V value = e.getValue();            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, evict);        &#125;    &#125;&#125;</code></pre><p>tableSizeFor看起来很恶心绕人,但其实功能很简单</p><p>|=是进行逻辑或运算,把n不断右移动来进行或运算</p><p>我们假想n的第一个1的位置为x,右移一位进行或之后,x和x右边1位即x+1位就都是1了</p><p>然后右移两位,那这样x,x+1,x+2,x+3都是1</p><p>然后右移四位,那这样x,x+1,x+2,x+3,x+4,x+5,x+6,x+7,x+8都是1</p><p>有最大位的限制,所以这样最后得到的n保证了原本最高位之后的每一位都是1</p><p>那在此基础之上+1,返回的值就是n向上取最近的2的幂次方</p><p>通过这种方式来获取threshold</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;    <span class="hljs-keyword">int</span> n = cap - <span class="hljs-number">1</span>;    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;&#125;</code></pre><blockquote><p>举个栗子，输入cap是13，那n=12也就是1100</p><p>经过n|=n&gt;&gt;&gt;1得到 1100 ｜ 110  得到 1110</p><p>经过n|=n&gt;&gt;&gt;2得到 1110 ｜ 111  得到 1111</p><p>最后得到1111 后返回时+1 也就是16，当然是13向上取最小的二的幂次方</p></blockquote><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;    <span class="hljs-keyword">int</span> h;    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);&#125;</code></pre><p>hashmap里的获取的hash值不只是hashCode</p><p>还需要进行一个<strong>扰动函数</strong></p><p>hashCode()的值是一个int数，默认的map大小是1&lt;&lt;4，也就是16，如果直接取hashCode()的后16位作为hash值可能不会那么好，为了增加随机性，这里的扰动函数就把h右移了16位进行异或。</p><blockquote><p>那么这样真的可以增加随机性吗</p></blockquote><p>我自己没有做实验，但是我找到了一个老哥做了实验，这里引用一下<a href="https://bugstack.blog.csdn.net/article/details/107903915?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link" target="_blank" rel="noopener">https://bugstack.blog.csdn.net/article/details/107903915?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</a></p><p>通过他的实验是可以看出分布更加平均的，这样更具备随机性</p><p>其他的函数暂时感觉还没有那么重要，所以就先不深挖了，以后有机会再补充一下。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的String类</title>
    <link href="/2021/07/03/210703/"/>
    <url>/2021/07/03/210703/</url>
    
    <content type="html"><![CDATA[<p>String可谓人人皆知，但是Sting不属于java 8大基本类型，它为字符串操作提供了一系列的成员函数，现在我们稍微了解一下，对其中的坑加以区分</p><h1 id="Java-String类定义"><a href="#Java-String类定义" class="headerlink" title="Java String类定义"></a>Java String类定义</h1><p>首先我们查看String类的源码（基于jdk8）</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hash; <span class="hljs-comment">// Default to 0</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">6849794470754667710L</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ObjectStreamField[] serialPersistentFields =        <span class="hljs-keyword">new</span> ObjectStreamField[<span class="hljs-number">0</span>];    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">this</span>.value = <span class="hljs-string">""</span>.value;    &#125;    <span class="hljs-comment">//······//</span>&#125;</code></pre><ul><li><p>String类是final类，也就是说String类无法被继承。</p></li><li><p>成员变量value是通过char[]进行存储，可以看到这也是final变量，意味着String的值无法被修改？</p><p>等等，似乎和我们认知有一些不同，按理来说String的值不仅可以replace，add，同样也可以直接=另外一个字符串。这是为什么呢？</p></li></ul><h1 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h1><p>字符串的分配和其他的对象分配一样，需要耗费高昂的时间与空间作为代价，为了提高性能和减少内存开销，JVM做了以下操作：</p><ul><li><p>为字符串开辟一个字符串常量池，有点像缓冲区</p></li><li><p>在创建字符串常量时需要判断常量池里是否有这样的字符串，如果有就返回引用实例，否则就需要先在常量池中创建字符串然后返回引用实例</p></li><li><p>所以常量池中是不会存在相同的字符串</p></li></ul><p>  举个栗子：</p>  <pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>;String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);</code></pre><p>  可以看到，str1直接指向字符串常量池中的abc，而str2指向堆中的new String，然后new String的值为字符串常量池的abc</p><p>  <img src="1.png" srcset="/img/loading.gif" alt="1"></p><p>  那么String str1 = “abc”;String str2 = new String(“abc”);分别创建了几个新对象？</p><ul><li><p>String str1=”abc”;产生一个对象，”abc”放入常量池中，而str1为引用，因此有一个新对象</p></li><li><p>String str2 = new String(“abc”);产生一个或者两个对象，堆中new了一个新的String，str2引用了这个新对象（这里我们叫它temp），然后判断常量池中是否存在”abc”，如果不存在，需要创建一个”abc”对象，然后temp引用常量池的”abc”</p></li></ul>  <br/>  <details>    <summary>是否接受挑战？判断创建了几个对象（假设语句之前常量池都是空的）</summary>    <pre><code class="hljs arduino"><span class="hljs-keyword">String</span> str3 = <span class="hljs-string">"a"</span>+<span class="hljs-string">"b"</span>;<span class="hljs-comment">//3</span><span class="hljs-keyword">String</span> str4 = <span class="hljs-string">"ab"</span>+<span class="hljs-string">"ab"</span>;<span class="hljs-comment">//2</span><span class="hljs-keyword">String</span> str5 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"ab"</span>+<span class="hljs-string">"ab"</span>);<span class="hljs-comment">//3</span><span class="hljs-keyword">String</span> str6 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"a"</span>+<span class="hljs-string">"b"</span>);<span class="hljs-comment">//4</span></code></pre>  </details><h3 id="结合以上，我们可以得出结论："><a href="#结合以上，我们可以得出结论：" class="headerlink" title="结合以上，我们可以得出结论："></a>结合以上，我们可以得出结论：</h3><ul><li><p>单独使用””引号创建的字符串都是常量,编译期就已经确定存储到String Pool中</p></li><li><p>使用new String(“”)创建的对象会存储到heap中,是运行期新创建的</p></li></ul><h1 id="equal-和"><a href="#equal-和" class="headerlink" title="equal 和 =="></a>equal 和 ==</h1><p>依旧是查看源码</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;        String anotherString = (String)anObject;        <span class="hljs-keyword">int</span> n = value.length;        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;            <span class="hljs-keyword">char</span> v1[] = value;            <span class="hljs-keyword">char</span> v2[] = anotherString.value;            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">if</span> (v1[i] != v2[i])                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;                i++;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;</code></pre><p>我们都知道，Object类中的equals是判断引用地址的，但是在String类中稍有不同，原因在于String重写了equals</p><p>String类中==判断地址相同与否，而equals判断值相同与否</p><p>通过源码可以看出equal中先判断==，然后判断字符串的char[]是否相同，也就是说比较的是内容</p><p>结合上一节我们可以看出</p><pre><code class="hljs java">String a = <span class="hljs-string">"abc"</span>;String b = <span class="hljs-string">"abc"</span>;<span class="hljs-keyword">boolean</span> judge1 = a.equals(b);<span class="hljs-comment">//true</span><span class="hljs-keyword">boolean</span> judge2 = a==b;<span class="hljs-comment">//false</span></code></pre><h1 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h1><p>既然字符串创建完后不可修改，那么字符串的改变操作是怎样完成的呢，如replace，还有+=操作</p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">char</span> oldChar, <span class="hljs-keyword">char</span> newChar)</span> </span>&#123;    <span class="hljs-keyword">if</span> (oldChar != newChar) &#123;        <span class="hljs-keyword">int</span> len = value.length;        <span class="hljs-keyword">int</span> i = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">char</span>[] val = value; <span class="hljs-comment">/* avoid getfield opcode */</span>        <span class="hljs-keyword">while</span> (++i &lt; len) &#123;            <span class="hljs-keyword">if</span> (val[i] == oldChar) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span> (i &lt; len) &#123;            <span class="hljs-keyword">char</span> buf[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[len];            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;                buf[j] = val[j];            &#125;            <span class="hljs-keyword">while</span> (i &lt; len) &#123;                <span class="hljs-keyword">char</span> c = val[i];                buf[i] = (c == oldChar) ? newChar : c;                i++;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(buf, <span class="hljs-keyword">true</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;&#125;</code></pre><p>通过<code>return new String(buf,true);</code>可以看出来其实replace后返回的是一个新的String了，也就是说实际上原本的String并没有改变。只不过是引用到了一个新的String上，并且原本常量池的对象不会被GC回收</p><p>也因此，调用replace时需要将对象分配给新的引用实例</p><pre><code class="hljs java">s.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>);<span class="hljs-comment">//不起效，新的对象创建后未分配引用实例</span>s = s.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>);<span class="hljs-comment">//新的对象返回给原来的引用，看起来像是在原本的s上进行replace一样</span></code></pre><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串+"></a>字符串+</h1><p>+=其实和+是一个道理，我们不做特殊讨论</p><p>Java机制保证了无法重载操作符。但是String不属于8大基本类型的情况下是怎么使用+的呢。只有一种可能：</p><p>java自己破例帮我们写了一个重载，在使用加号进行计算的表达式中，只要遇到String字符串，则所有的数据都会转化为String类型进行拼接，如果是原始数据，则直接拼接，如果是对象。则调用toStirng方法的返回值然后拼接。</p><p>我们看下面几个问题</p><pre><code class="hljs java">String str1 = <span class="hljs-string">'abc'</span>;String str2 = <span class="hljs-string">'def'</span>;String res = str1 + str2;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>;String res = str1 + <span class="hljs-string">"def"</span>;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"def"</span>);String res = str1 + str2;</code></pre><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String res = str1 + <span class="hljs-string">"def"</span>;</code></pre><p>以上四组代码获取的res.equals(“abcdef”)的值为true，字符串常量池中分别有什么？</p><p>利用javap进行反解析</p><blockquote><p>javac test.java</p></blockquote><blockquote><p>javap -verbose -c test</p></blockquote><p>对四种情况查看constant pool</p><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#9</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#20</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#4</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#5</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#6</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#22</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#4</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#9</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#9</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#20</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#18</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#5</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#21</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#3</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#9</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#11</span>.<span class="hljs-string">#20</span>        <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#24</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#25</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#8</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#26</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#9</span> = Methodref          <span class="hljs-string">#6</span>.<span class="hljs-string">#27</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>  <span class="hljs-string">#10</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#28</span>            <span class="hljs-comment">// com/FJL/test</span>  <span class="hljs-string">#11</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#29</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#11</span>.<span class="hljs-string">#20</span>        <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#21</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#23</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// java/lang/StringBuilder</span>   <span class="hljs-string">#6</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span>   <span class="hljs-string">#7</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#25</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#26</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#9</span> = Methodref          <span class="hljs-string">#5</span>.<span class="hljs-string">#27</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>  <span class="hljs-string">#10</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#28</span>            <span class="hljs-comment">// com/FJL/test</span>  <span class="hljs-string">#11</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#29</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><p>可以看到constant pool里都没有abcdef的，对比一下如下代码的结果</p><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"def"</span>);String res = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>+<span class="hljs-string">"def"</span>);</code></pre><pre><code class="hljs delphi">Constant pool:   <span class="hljs-string">#1</span> = Methodref          <span class="hljs-string">#8</span>.<span class="hljs-string">#17</span>         <span class="hljs-comment">// java/lang/Object."&lt;init&gt;":()V</span>   <span class="hljs-string">#2</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#18</span>            <span class="hljs-comment">// java/lang/String</span>   <span class="hljs-string">#3</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#19</span>            <span class="hljs-comment">// abc</span>   <span class="hljs-string">#4</span> = Methodref          <span class="hljs-string">#2</span>.<span class="hljs-string">#20</span>         <span class="hljs-comment">// java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span>   <span class="hljs-string">#5</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#21</span>            <span class="hljs-comment">// def</span>   <span class="hljs-string">#6</span> = <span class="hljs-keyword">String</span>             <span class="hljs-string">#22</span>            <span class="hljs-comment">// abcdef</span>   <span class="hljs-string">#7</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#23</span>            <span class="hljs-comment">// com/FJL/test</span>   <span class="hljs-string">#8</span> = <span class="hljs-keyword">Class</span>              <span class="hljs-string">#24</span>            <span class="hljs-comment">// java/lang/Object</span></code></pre><p>是有abcdef生成的，这是为什么呢。</p><p>通过观察可以发现+针对于上述四种情况都是相当于调用了StringBuilder.append(“___”).toString();</p><p>而最后一种情况直接加两个常量则没有这种字节码。</p><p>因此针对于String 的+ ，是不会在字符串常量池中创建新对象的。</p><p><strong>结论：+前后有一个是String类，就不会把加完的结果创建在字符串常量池中</strong></p><h1 id="StringBuffer-and-StringBuilder"><a href="#StringBuffer-and-StringBuilder" class="headerlink" title="StringBuffer and StringBuilder"></a>StringBuffer and StringBuilder</h1><p>由于String前面介绍的特殊性质，才有了StringBuffer和StringBuilder，二者都可以改变内容的值</p><p>即StringBuffer和StringBuilder类的对象可以被多次修改，但是不会产生新的未使用的对象</p><p>二者的区别在于</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> count;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> value.length;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minimumCapacity)</span> </span>&#123;    <span class="hljs-keyword">super</span>.ensureCapacity(minimumCapacity);&#125;······</code></pre><p>StringBuffer类的override的函数都有synchronized关键字修饰，即可以多线程访问</p><p>StringBuffer是<strong>线程安全的</strong>，StringBuilder<strong>不是线程安全的</strong></p><p>执行效率一般情况下是：</p><p>　<strong>StringBuilder &gt; StringBuffer &gt; String</strong></p><p>而对于String，StringBuffer和StringBuilder三者而言，需要在特定的场合下使用：</p><p><strong>String：适用于少量的字符串操作的情况</strong></p><p><strong>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</strong></p><p><strong>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo搭建自己的博客</title>
    <link href="/2020/06/10/200610/"/>
    <url>/2020/06/10/200610/</url>
    
    <content type="html"><![CDATA[<hr><p>本文介绍从零开始搭建自己的个人博客，使用hexo框架可以有效节省时间，当然最主要的是众多美观的主题可供我们选择！</p><h1 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h1><h3 id="安装nodejs与npm"><a href="#安装nodejs与npm" class="headerlink" title="安装nodejs与npm"></a>安装nodejs与npm</h3><p>hexo需要使用NodeJs，去官网下载Node.js</p><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>Node.js集成了npm（默认的包管理工具无需自己安装）</p><p>在命令行查看自己是否安装成功</p><blockquote><p>FJLMac ~&gt; node -v<br>v14.2.0</p><p>FJLMac ~&gt; npm -v<br>6.14.4</p></blockquote><h1 id="0x02-安装hexo"><a href="#0x02-安装hexo" class="headerlink" title="0x02 安装hexo"></a>0x02 安装hexo</h1><p>主角登场！！！</p><p>先在想建博客的地方新建文件夹，今后所有的博客相关全都放在这里，遇到问题了删了重来就完事了。</p><h3 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h3><p>国外资源，国内好像下载起来很有问题。参考别人的做法。使用淘宝的国内镜像仓库中的资源。即安装cnpm，使用cnpm作为包管理器</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>检查是否安装完成</p><blockquote><p>FJLMac ~&gt; cnpm -v<br><a href="mailto:cnpm@6.1.1">cnpm@6.1.1</a> (/usr/local/lib/node_modules/cnpm/lib/parse_argv.js)<br><a href="mailto:npm@6.14.5">npm@6.14.5</a> (/usr/local/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)<br><a href="mailto:node@14.2.0">node@14.2.0</a> (/usr/local/bin/node)<br><a href="mailto:npminstall@3.27.0">npminstall@3.27.0</a> (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)<br>prefix=/usr/local<br>darwin x64 19.3.0<br>registry=<a href="https://r.npm.taobao.org" target="_blank" rel="noopener">https://r.npm.taobao.org</a></p></blockquote><h3 id="使用cnpm安装hexo"><a href="#使用cnpm安装hexo" class="headerlink" title="使用cnpm安装hexo"></a>使用cnpm安装hexo</h3><blockquote><p>cnpm install -g hexo-cli</p></blockquote><p>检查安装完成</p><blockquote><p>FJLMac ~&gt; hexo -v<br>hexo-cli: 3.1.0<br>os: Darwin 19.3.0 darwin x64<br>node: 14.2.0<br>v8: 8.1.307.31-node.33<br>uv: 1.37.0<br>…</p></blockquote><h3 id="使用hexo初始化"><a href="#使用hexo初始化" class="headerlink" title="使用hexo初始化"></a>使用hexo初始化</h3><p>去新建的文件夹下hexo init</p><p><img src="1.png" srcset="/img/loading.gif" alt="image-20200610002829385"></p><h1 id="0x03-本机测试"><a href="#0x03-本机测试" class="headerlink" title="0x03 本机测试"></a>0x03 本机测试</h1><p>hexo的几个命令</p><blockquote><p>hexo clean #可以清除缓存</p><p>hexo g        #generate， 生成文件</p><p>hexo s        #server，在本机4000端口运行，可以查看预览效果</p><p>hexo d       #deploy，部署到github上</p></blockquote><p>每次修改的话先clean 然后generate后server看一下，没问题了再deploy嗷。</p><p>查看效果即输入localhost:4000查看</p><p><img src="2.png" srcset="/img/loading.gif" alt="image-20200610003659342"></p><h1 id="0x04-托管到github上"><a href="#0x04-托管到github上" class="headerlink" title="0x04 托管到github上"></a>0x04 托管到github上</h1><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>在自己的github上建立一个新仓库，仓库名为<em>yourname</em>.github.io(这个一定不能弄错，会哭的)</p><h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><blockquote><p>cnpm install –save hexo-deployer-git</p></blockquote><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>vim打开hexo根目录下的_config.yml</p><blockquote><p>deploy:<br>  type: git<br>  repo: <em>你的仓库的https地址</em><br>  branch: master</p></blockquote><p>可以在建立仓库的时候直接把https地址复制了，也可以建完之后进入仓库主页的clone按钮下去复制</p><p><img src="3.png" srcset="/img/loading.gif" alt="image-20200610003659342"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>一定要在hexo s之后确认没啥毛病了再部署上去</p><blockquote><p>hexo d</p></blockquote><p>之后就可以去自己的站点访问了。<em>yourname</em>.github.io</p><p>如果有需要自己去购买一个域名去备案就可以了。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>hexo真的是神奇，首先感谢b站up主<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=11446526799871628860" target="_blank" rel="noopener">CodeSheep</a>的教程。自己弄起来这个的过程还是挺有意思的，hexo的功能还很强大等待我们去发掘，自己以后慢慢瞎折腾吧。主题什么的之后自己再写博客好了。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
